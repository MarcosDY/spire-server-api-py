# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from spire.api.server.bundle.v1 import bundle_pb2 as spire_dot_api_dot_server_dot_bundle_dot_v1_dot_bundle__pb2
from spire.api.types import bundle_pb2 as spire_dot_api_dot_types_dot_bundle__pb2


class BundleStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CountBundles = channel.unary_unary(
                '/spire.api.server.bundle.v1.Bundle/CountBundles',
                request_serializer=spire_dot_api_dot_server_dot_bundle_dot_v1_dot_bundle__pb2.CountBundlesRequest.SerializeToString,
                response_deserializer=spire_dot_api_dot_server_dot_bundle_dot_v1_dot_bundle__pb2.CountBundlesResponse.FromString,
                )
        self.GetBundle = channel.unary_unary(
                '/spire.api.server.bundle.v1.Bundle/GetBundle',
                request_serializer=spire_dot_api_dot_server_dot_bundle_dot_v1_dot_bundle__pb2.GetBundleRequest.SerializeToString,
                response_deserializer=spire_dot_api_dot_types_dot_bundle__pb2.Bundle.FromString,
                )
        self.AppendBundle = channel.unary_unary(
                '/spire.api.server.bundle.v1.Bundle/AppendBundle',
                request_serializer=spire_dot_api_dot_server_dot_bundle_dot_v1_dot_bundle__pb2.AppendBundleRequest.SerializeToString,
                response_deserializer=spire_dot_api_dot_types_dot_bundle__pb2.Bundle.FromString,
                )
        self.PublishJWTAuthority = channel.unary_unary(
                '/spire.api.server.bundle.v1.Bundle/PublishJWTAuthority',
                request_serializer=spire_dot_api_dot_server_dot_bundle_dot_v1_dot_bundle__pb2.PublishJWTAuthorityRequest.SerializeToString,
                response_deserializer=spire_dot_api_dot_server_dot_bundle_dot_v1_dot_bundle__pb2.PublishJWTAuthorityResponse.FromString,
                )
        self.ListFederatedBundles = channel.unary_unary(
                '/spire.api.server.bundle.v1.Bundle/ListFederatedBundles',
                request_serializer=spire_dot_api_dot_server_dot_bundle_dot_v1_dot_bundle__pb2.ListFederatedBundlesRequest.SerializeToString,
                response_deserializer=spire_dot_api_dot_server_dot_bundle_dot_v1_dot_bundle__pb2.ListFederatedBundlesResponse.FromString,
                )
        self.GetFederatedBundle = channel.unary_unary(
                '/spire.api.server.bundle.v1.Bundle/GetFederatedBundle',
                request_serializer=spire_dot_api_dot_server_dot_bundle_dot_v1_dot_bundle__pb2.GetFederatedBundleRequest.SerializeToString,
                response_deserializer=spire_dot_api_dot_types_dot_bundle__pb2.Bundle.FromString,
                )
        self.BatchCreateFederatedBundle = channel.unary_unary(
                '/spire.api.server.bundle.v1.Bundle/BatchCreateFederatedBundle',
                request_serializer=spire_dot_api_dot_server_dot_bundle_dot_v1_dot_bundle__pb2.BatchCreateFederatedBundleRequest.SerializeToString,
                response_deserializer=spire_dot_api_dot_server_dot_bundle_dot_v1_dot_bundle__pb2.BatchCreateFederatedBundleResponse.FromString,
                )
        self.BatchUpdateFederatedBundle = channel.unary_unary(
                '/spire.api.server.bundle.v1.Bundle/BatchUpdateFederatedBundle',
                request_serializer=spire_dot_api_dot_server_dot_bundle_dot_v1_dot_bundle__pb2.BatchUpdateFederatedBundleRequest.SerializeToString,
                response_deserializer=spire_dot_api_dot_server_dot_bundle_dot_v1_dot_bundle__pb2.BatchUpdateFederatedBundleResponse.FromString,
                )
        self.BatchSetFederatedBundle = channel.unary_unary(
                '/spire.api.server.bundle.v1.Bundle/BatchSetFederatedBundle',
                request_serializer=spire_dot_api_dot_server_dot_bundle_dot_v1_dot_bundle__pb2.BatchSetFederatedBundleRequest.SerializeToString,
                response_deserializer=spire_dot_api_dot_server_dot_bundle_dot_v1_dot_bundle__pb2.BatchSetFederatedBundleResponse.FromString,
                )
        self.BatchDeleteFederatedBundle = channel.unary_unary(
                '/spire.api.server.bundle.v1.Bundle/BatchDeleteFederatedBundle',
                request_serializer=spire_dot_api_dot_server_dot_bundle_dot_v1_dot_bundle__pb2.BatchDeleteFederatedBundleRequest.SerializeToString,
                response_deserializer=spire_dot_api_dot_server_dot_bundle_dot_v1_dot_bundle__pb2.BatchDeleteFederatedBundleResponse.FromString,
                )


class BundleServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CountBundles(self, request, context):
        """Count bundles.

        The caller must be local or present an admin X509-SVID.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetBundle(self, request, context):
        """Gets the bundle for the trust domain of the server.

        The RPC does not require authentication.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AppendBundle(self, request, context):
        """Append to the bundle. Items specified in the bundle in the request are
        appended to the existing bundle. If the bundle does not exist, NOT_FOUND
        is returned. This is the only RPC that can be used to update the
        bundle for the trust domain of the SPIRE server.

        The caller must be local or present an admin X509-SVID.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PublishJWTAuthority(self, request, context):
        """Publishes a downstream JWT authority to the SPIRE server. If the server
        is itself a downstream server (i.e. configured with an UpstreamAuthority
        plugin), the JWT authority is published further upstream using the
        UpstreamAuthority plugin. If the server is not a downstream server, or
        if the UpstreamAuthority does not support publishing JWT authorities,
        the server appends the JWT authority to its own bundle.

        The caller must present a downstream X509-SVID.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListFederatedBundles(self, request, context):
        """Lists federated bundles.

        The caller must be local or present an admin X509-SVID.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetFederatedBundle(self, request, context):
        """Gets a federated bundle. If the bundle does not exist, NOT_FOUND is returned.

        The caller must be local or present an admin or an active agent X509-SVID.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BatchCreateFederatedBundle(self, request, context):
        """Batch creates one or more federated bundles.

        The caller must be local or present an admin X509-SVID.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BatchUpdateFederatedBundle(self, request, context):
        """Batch updates one or more federated bundles.

        The caller must be local or present an admin X509-SVID.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BatchSetFederatedBundle(self, request, context):
        """Batch upserts one or more federated bundles.

        The caller must be local or present an admin X509-SVID.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BatchDeleteFederatedBundle(self, request, context):
        """Batch deletes one or more federated bundles.

        The caller must be local or present an admin X509-SVID.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BundleServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CountBundles': grpc.unary_unary_rpc_method_handler(
                    servicer.CountBundles,
                    request_deserializer=spire_dot_api_dot_server_dot_bundle_dot_v1_dot_bundle__pb2.CountBundlesRequest.FromString,
                    response_serializer=spire_dot_api_dot_server_dot_bundle_dot_v1_dot_bundle__pb2.CountBundlesResponse.SerializeToString,
            ),
            'GetBundle': grpc.unary_unary_rpc_method_handler(
                    servicer.GetBundle,
                    request_deserializer=spire_dot_api_dot_server_dot_bundle_dot_v1_dot_bundle__pb2.GetBundleRequest.FromString,
                    response_serializer=spire_dot_api_dot_types_dot_bundle__pb2.Bundle.SerializeToString,
            ),
            'AppendBundle': grpc.unary_unary_rpc_method_handler(
                    servicer.AppendBundle,
                    request_deserializer=spire_dot_api_dot_server_dot_bundle_dot_v1_dot_bundle__pb2.AppendBundleRequest.FromString,
                    response_serializer=spire_dot_api_dot_types_dot_bundle__pb2.Bundle.SerializeToString,
            ),
            'PublishJWTAuthority': grpc.unary_unary_rpc_method_handler(
                    servicer.PublishJWTAuthority,
                    request_deserializer=spire_dot_api_dot_server_dot_bundle_dot_v1_dot_bundle__pb2.PublishJWTAuthorityRequest.FromString,
                    response_serializer=spire_dot_api_dot_server_dot_bundle_dot_v1_dot_bundle__pb2.PublishJWTAuthorityResponse.SerializeToString,
            ),
            'ListFederatedBundles': grpc.unary_unary_rpc_method_handler(
                    servicer.ListFederatedBundles,
                    request_deserializer=spire_dot_api_dot_server_dot_bundle_dot_v1_dot_bundle__pb2.ListFederatedBundlesRequest.FromString,
                    response_serializer=spire_dot_api_dot_server_dot_bundle_dot_v1_dot_bundle__pb2.ListFederatedBundlesResponse.SerializeToString,
            ),
            'GetFederatedBundle': grpc.unary_unary_rpc_method_handler(
                    servicer.GetFederatedBundle,
                    request_deserializer=spire_dot_api_dot_server_dot_bundle_dot_v1_dot_bundle__pb2.GetFederatedBundleRequest.FromString,
                    response_serializer=spire_dot_api_dot_types_dot_bundle__pb2.Bundle.SerializeToString,
            ),
            'BatchCreateFederatedBundle': grpc.unary_unary_rpc_method_handler(
                    servicer.BatchCreateFederatedBundle,
                    request_deserializer=spire_dot_api_dot_server_dot_bundle_dot_v1_dot_bundle__pb2.BatchCreateFederatedBundleRequest.FromString,
                    response_serializer=spire_dot_api_dot_server_dot_bundle_dot_v1_dot_bundle__pb2.BatchCreateFederatedBundleResponse.SerializeToString,
            ),
            'BatchUpdateFederatedBundle': grpc.unary_unary_rpc_method_handler(
                    servicer.BatchUpdateFederatedBundle,
                    request_deserializer=spire_dot_api_dot_server_dot_bundle_dot_v1_dot_bundle__pb2.BatchUpdateFederatedBundleRequest.FromString,
                    response_serializer=spire_dot_api_dot_server_dot_bundle_dot_v1_dot_bundle__pb2.BatchUpdateFederatedBundleResponse.SerializeToString,
            ),
            'BatchSetFederatedBundle': grpc.unary_unary_rpc_method_handler(
                    servicer.BatchSetFederatedBundle,
                    request_deserializer=spire_dot_api_dot_server_dot_bundle_dot_v1_dot_bundle__pb2.BatchSetFederatedBundleRequest.FromString,
                    response_serializer=spire_dot_api_dot_server_dot_bundle_dot_v1_dot_bundle__pb2.BatchSetFederatedBundleResponse.SerializeToString,
            ),
            'BatchDeleteFederatedBundle': grpc.unary_unary_rpc_method_handler(
                    servicer.BatchDeleteFederatedBundle,
                    request_deserializer=spire_dot_api_dot_server_dot_bundle_dot_v1_dot_bundle__pb2.BatchDeleteFederatedBundleRequest.FromString,
                    response_serializer=spire_dot_api_dot_server_dot_bundle_dot_v1_dot_bundle__pb2.BatchDeleteFederatedBundleResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'spire.api.server.bundle.v1.Bundle', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Bundle(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CountBundles(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/spire.api.server.bundle.v1.Bundle/CountBundles',
            spire_dot_api_dot_server_dot_bundle_dot_v1_dot_bundle__pb2.CountBundlesRequest.SerializeToString,
            spire_dot_api_dot_server_dot_bundle_dot_v1_dot_bundle__pb2.CountBundlesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetBundle(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/spire.api.server.bundle.v1.Bundle/GetBundle',
            spire_dot_api_dot_server_dot_bundle_dot_v1_dot_bundle__pb2.GetBundleRequest.SerializeToString,
            spire_dot_api_dot_types_dot_bundle__pb2.Bundle.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AppendBundle(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/spire.api.server.bundle.v1.Bundle/AppendBundle',
            spire_dot_api_dot_server_dot_bundle_dot_v1_dot_bundle__pb2.AppendBundleRequest.SerializeToString,
            spire_dot_api_dot_types_dot_bundle__pb2.Bundle.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PublishJWTAuthority(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/spire.api.server.bundle.v1.Bundle/PublishJWTAuthority',
            spire_dot_api_dot_server_dot_bundle_dot_v1_dot_bundle__pb2.PublishJWTAuthorityRequest.SerializeToString,
            spire_dot_api_dot_server_dot_bundle_dot_v1_dot_bundle__pb2.PublishJWTAuthorityResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListFederatedBundles(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/spire.api.server.bundle.v1.Bundle/ListFederatedBundles',
            spire_dot_api_dot_server_dot_bundle_dot_v1_dot_bundle__pb2.ListFederatedBundlesRequest.SerializeToString,
            spire_dot_api_dot_server_dot_bundle_dot_v1_dot_bundle__pb2.ListFederatedBundlesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetFederatedBundle(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/spire.api.server.bundle.v1.Bundle/GetFederatedBundle',
            spire_dot_api_dot_server_dot_bundle_dot_v1_dot_bundle__pb2.GetFederatedBundleRequest.SerializeToString,
            spire_dot_api_dot_types_dot_bundle__pb2.Bundle.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BatchCreateFederatedBundle(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/spire.api.server.bundle.v1.Bundle/BatchCreateFederatedBundle',
            spire_dot_api_dot_server_dot_bundle_dot_v1_dot_bundle__pb2.BatchCreateFederatedBundleRequest.SerializeToString,
            spire_dot_api_dot_server_dot_bundle_dot_v1_dot_bundle__pb2.BatchCreateFederatedBundleResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BatchUpdateFederatedBundle(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/spire.api.server.bundle.v1.Bundle/BatchUpdateFederatedBundle',
            spire_dot_api_dot_server_dot_bundle_dot_v1_dot_bundle__pb2.BatchUpdateFederatedBundleRequest.SerializeToString,
            spire_dot_api_dot_server_dot_bundle_dot_v1_dot_bundle__pb2.BatchUpdateFederatedBundleResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BatchSetFederatedBundle(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/spire.api.server.bundle.v1.Bundle/BatchSetFederatedBundle',
            spire_dot_api_dot_server_dot_bundle_dot_v1_dot_bundle__pb2.BatchSetFederatedBundleRequest.SerializeToString,
            spire_dot_api_dot_server_dot_bundle_dot_v1_dot_bundle__pb2.BatchSetFederatedBundleResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BatchDeleteFederatedBundle(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/spire.api.server.bundle.v1.Bundle/BatchDeleteFederatedBundle',
            spire_dot_api_dot_server_dot_bundle_dot_v1_dot_bundle__pb2.BatchDeleteFederatedBundleRequest.SerializeToString,
            spire_dot_api_dot_server_dot_bundle_dot_v1_dot_bundle__pb2.BatchDeleteFederatedBundleResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
